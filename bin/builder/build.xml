<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<!--
    Gantry phing build file.

    @copyright (C) 2015 - 2022 RocketTheme, LLC. All rights reserved
    @copyright (C) 2014 Joshua Weiss, coder4life (@github)

    The following parameters can be defined inside the PHPSTORM build task as Arguments. They
    allow the build file to be platform independent as not path information resides within
    any of the build files.

    Example: ./build.php dev -Dxml.version=5.5-dev

    Parameters: (with default values - adjust the directories in PHPSTORM to your individual setup)
    -Dproject_dir=../../                   (= git/gantry5)
    -Dpackage_dir=dist                     (= git/gantry5/dist)
    -Dtmp_dir=build/tmp                    (= git/gantry5/build/tmp)
    -Dbuild_dir=build/package              (= git/gantry5/build/package)
    -Dxml.version=version                  (= build version)
    -Dupdate_versions=false                (= true / for CI and automated push)
-->
<project name="gantry5" basedir="." description="Phing Build Script" default="prod">
    <taskdef name="jsonmap" classname="JsonMapTask" />

    <!-- Setup of any global settings that will apply to the entire build script -->
    <property file="${phing.dir}/build.ini" />

    <condition property="project_dir" value="${phing.dir}/../../">
        <not><isset property="project_dir" /></not>
    </condition>
    <condition property="package_dir" value="${project_dir}/dist">
        <not><isset property="package_dir" /></not>
    </condition>

    <condition property="tmp_dir" value="${phing.dir}/tmp">
        <not><isset property="tmp_dir" /></not>
    </condition>
    <condition property="build_dir" value="${phing.dir}/package">
        <not><isset property="build_dir" /></not>
    </condition>
    <condition property="update_versions" value="false">
        <not><isset property="update_versions" /></not>
    </condition>

    <property name="path.assets" value="${project_dir}/assets" />
    <property name="path.engines" value="${project_dir}/engines" />
    <property name="path.platforms" value="${project_dir}/platforms" />
    <property name="path.src" value="${project_dir}/src" />
    <property name="path.themes" value="${project_dir}/themes" />
    <tstamp>
        <format property="str.datefmt" pattern="MMMM d, yyyy" locale="en"/>
    </tstamp>
    <tstamp>
        <format property="str.datexml" pattern="MMMM d, yyyy" locale="en"/>
    </tstamp>
    <property name="version.date" value="${str.datexml}" />

    <condition property="str.version" value="_${cfg.versionprefix}${xml.version}">
        <istrue value="${cfg.addversion}" />
    </condition>
    <property name="str.date" value="" />
    <condition property="str.date" value="_${str.datefmt}">
        <istrue value="${cfg.adddate}" />
    </condition>

    <property name="str.fileversion" value="${str.version}${str.date}" />

    <condition property="do.joomla">
        <istrue value="${cfg.joomla}" />
    </condition>

    <!-- Add version information to all xml files -->
    <filterchain id="filter">
        <replacetokens>
            <token key="version" value="${xml.version}"/>
            <token key="versiondate" value="${version.date}" />
        </replacetokens>
    </filterchain>

    <!-- Importing platforms targets -->
    <import file="build-joomla.xml" />
    <import file="build-wordpress.xml" />
    <import file="build-grav.xml" />

    <!-- Preflight check to see if we can even run the build script -->
    <target name="preflight">
        <echo message="Checking if we can run all build options..." />

        <delete dir="${tmp_dir}"/>
        <delete dir="${build_dir}"/>
        <delete dir="${package_dir}"/>
    </target>

    <target name="info">
        <echo message="Phing Version:   ${phing.version}" />
        <echo message="Project:         ${cfg.name}" />
        <echo message="XML Version:     ${xml.version}" />
        <echo message="XML Author:      ${xml.author}" />
        <echo message="XML Copyright:   ${xml.copyright}" />
        <echo message="XML License:     ${xml.license}" />
        <echo message="XML Description: ${xml.description}" />
        <echo message="Date:            ${TODAY}" />
    </target>

    <target name="mkdir">
        <echo message="Making directory structure..." />

        <mkdir dir="${tmp_dir}" />
        <mkdir dir="${build_dir}" />
        <mkdir dir="${build_dir}/distribution" />
        <mkdir dir="${build_dir}/distribution/packages" />
        <mkdir dir="${package_dir}" />
    </target>

    <!-- Initialize all project related files, at this point we are past any "location" setup work so its safe to proceed -->
    <target name="assets-prod">
        <echo message="Removing Sourcemaps and compressing Assets (CSS/JS)..." />
        <exec command="${project_dir}/node_modules/.bin/gulp --prod" checkreturn="true" error="${phing.dir}/gulp-prod-error.txt" />
    </target>

    <target name="joomla">
        <phingcall target="cleanup" />
        <phingcall target="mkdir" />

        <phingcall target="build-joomla-installer" />
        <phingcall target="build-joomla-component" />
        <phingcall target="build-joomla-library" />
        <phingcall target="build-joomla-nucleus" />
        <phingcall target="build-joomla-plugins" />
        <phingcall target="build-joomla-themes" />
        <phingcall target="joomla-package" />
    </target>

    <target name="wordpress">
        <phingcall target="cleanup" />
        <phingcall target="mkdir" />

        <phingcall target="build-wordpress-plugin" />
        <phingcall target="build-wordpress-themes" />
    </target>

    <target name="grav">
        <phingcall target="cleanup" />
        <phingcall target="mkdir" />

        <phingcall target="build-grav-plugin" />
        <phingcall target="build-grav-themes" />
    </target>

    <target name="reset-git">
        <echo message="Restoring Git repository to HEAD..." />
        <exec command="git fetch origin &amp;&amp; git reset --hard &amp;&amp; git clean -f" checkreturn="true" error="${phing.dir}/gulp-git-restore-error.txt" />
    </target>

    <target name="archive">

        <condition property="prefix" value="">
            <not><isset property="prefix" /></not>
        </condition>

        <zip destfile="${destination.file}.zip" prefix="${prefix}">
            <fileset dir="${base.directory}"/>
        </zip>
    </target>

    <target name="create-map">
        <jsonmap folder="${package_dir}" commit="${commit}"/>
    </target>

    <target name="cleanup">
        <delete dir="${tmp_dir}"/>
        <delete dir="${build_dir}"/>
    </target>

    <target name="postflight">
        <echo message="Congratulations, build finished without error!" />
    </target>

    <target name="prod-versions">
        <if>
            <istrue value="${update_versions}" />
            <then>
                <echo message="Updating versions in ${project_dir} ..." />

                <!-- Set SHA512 values -->
                <httpget url="https://github.com/gantry/gantry5/releases/download/${xml.version}/joomla-pkg_gantry5_v${xml.version}.zip" dir="${package_dir}"/>
                <httpget url="https://github.com/gantry/gantry5/releases/download/${xml.version}/joomla-tpl_g5_helium_v${xml.version}.zip" dir="${package_dir}"/>
                <httpget url="https://github.com/gantry/gantry5/releases/download/${xml.version}/joomla-tpl_g5_hydrogen_v${xml.version}.zip" dir="${package_dir}"/>
                <filehash file="${package_dir}/joomla-pkg_gantry5_v${xml.version}.zip" algorithm="sha512" propertyname="sha512_joomla_package" />
                <filehash file="${package_dir}/joomla-tpl_g5_helium_v${xml.version}.zip" algorithm="sha512" propertyname="sha512_joomla_helium" />
                <filehash file="${package_dir}/joomla-tpl_g5_hydrogen_v${xml.version}.zip" algorithm="sha512" propertyname="sha512_joomla_hydrogen" />

                <!-- Add version information to all xml files -->
                <filterchain id="filter_sha">
                    <replacetokens>
                        <token key="version" value="${xml.version}"/>
                        <token key="versiondate" value="${version.date}" />
                        <token key="sha512_joomla_package" value="${sha512_joomla_package}" />
                        <token key="sha512_joomla_helium" value="${sha512_joomla_helium}" />
                        <token key="sha512_joomla_hydrogen" value="${sha512_joomla_hydrogen}" />
                    </replacetokens>
                </filterchain>
                <reflexive>
                    <fileset dir="${project_dir}">
                        <include pattern="VERSION"/>
                        <include pattern="**/*.xml"/>
                        <include pattern="**/*.yaml"/>
                        <include pattern="*.xml"/>
                        <include pattern="*.yaml"/>
                        <include pattern="**/RealLoader.php"/>
                        <include pattern="**/install.php"/>
                        <exclude pattern="bin/**"/>
                        <exclude pattern="**/node_modules/**"/>
                        <exclude pattern="**/vendor/**"/>
                    </fileset>
                    <filterchain refid="filter_sha"/>
                </reflexive>
            </then>
            <else>
                <echo message="Skipping versions updates in ${project_dir} ..." />
            </else>
        </if>
    </target>

    <target name="checksum">
        <manifest file="${source}/MD5SUMS" checksum="md5">
            <fileset dir="${source}" />
        </manifest>
    </target>

    <target name="dev" depends="preflight,info,mkdir,joomla,wordpress,grav,create-map,cleanup,postflight" />
    <target name="prod" depends="preflight,info,mkdir,joomla,wordpress,grav,cleanup,postflight" />
    <target name="joomla-dev" depends="preflight,info,mkdir,joomla,create-map,cleanup,postflight" />
    <target name="wordpress-dev" depends="preflight,info,mkdir,wordpress,create-map,cleanup,postflight" />
    <target name="grav-dev" depends="preflight,info,mkdir,grav,create-map,cleanup,postflight" />
    <target name="joomla-prod" depends="preflight,info,mkdir,joomla,cleanup,postflight" />
    <target name="wordpress-prod" depends="preflight,info,mkdir,wordpress,cleanup,postflight" />
    <target name="grav-prod" depends="preflight,info,mkdir,grav,cleanup,postflight" />

</project>
